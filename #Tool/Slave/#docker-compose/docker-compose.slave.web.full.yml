version: "3"

networks:
    proxy:
      driver: bridge
    db-net:
      internal: true

services:
   nginx:
     image: jwilder/nginx-proxy:alpine
     container_name: nginx
     restart: always
     labels:
       com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: 'true'
     ports:
       - 80:80
       - 443:443
     volumes:
       - ../Proxy/conf/proxy.conf:/etc/nginx/conf.d/my_proxy.conf:ro
       - ../Proxy/vhost:/etc/nginx/vhost.d
       - ../Proxy/passwd:/etc/nginx/htpasswd
       - ../Proxy/data/html:/usr/share/nginx/html
       - ../Proxy/data/certs:/etc/nginx/certs:ro
       - /var/run/docker.sock:/tmp/docker.sock:ro
     networks:
       - proxy

   letsencrypt:
     image: jrcs/letsencrypt-nginx-proxy-companion
     container_name: letsencrypt
     volumes:
       - ../Proxy/conf/proxy.conf:/etc/nginx/conf.d/my_proxy.conf:ro
       - ../Proxy/vhost:/etc/nginx/vhost.d
       - ../Proxy/data/html:/usr/share/nginx/html
       - ../Proxy/data/certs:/etc/nginx/certs:rw
       - /var/run/docker.sock:/var/run/docker.sock:ro
     depends_on:
       - nginx
     networks:
       - proxy

   datab:
      image: mariadb:latest
      container_name: slave-${ID}-db
      restart: always
      networks:
        - db-net
      volumes:
        - ../Slave/db/sql/data:/var/lib/mysql
        - ../Slave/db/sql/dumps/database.sql:/docker-entrypoint-initdb.d/dump.sql:ro
      environment:
        MYSQL_RANDOM_ROOT_PASSWORD: 1
        MYSQL_USER: ${DB_USER}
        MYSQL_DATABASE: slave
        MYSQL_PASSWORD: ${DB_PASS}
      healthcheck:
        test: "/usr/bin/mysql --user=$$MYSQL_USER --password=$$MYSQL_PASSWORD --execute \"SHOW DATABASES;\""
        interval: 30s
        timeout: 3s
        retries: 2

   bck-end:
     build: ../Slave/api
     container_name: slave-${ID}-api
     working_dir: ${PWD}/../Slave/api
     tty: true
     privileged: true
     stdin_open: true
     depends_on:
       - datab
     ports:
       - 8080:8080
     networks:
       - proxy
       - db-net
     volumes:
       - ../Slave/api:${PWD}/../Slave/api:ro
       - ../Sources:${PWD}/../Sources/:ro
       - ../Project:${PWD}/../Project/
       - /var/run/docker.sock:/var/run/docker.sock
       - ${DOCKER_COMPOSE}:/usr/bin/docker-compose
       - ${DOCKER}:/usr/bin/docker
     environment:
       VIRTUAL_HOST: slave.${ID}.${DOMAIN}
       VIRTUAL_PORT: 8080
       LETSENCRYPT_HOST: slave.${ID}.${DOMAIN}
       LETSENCRYPT_EMAIL: ${EMAIL}
       API_MOD: ${API_MOD}
       API_PASS: 1q2W3e4R
       DB_USER: ${DB_USER}
       DB_PASS: ${DB_PASS}
       API_DOMAIN: ${DOMAIN}
       API_ID: ${ID}
     healthcheck:
       test: "curl -Ls -o /dev/null -w \"%{http_code}\n%{url_effective}\n\" http://localhost:$$VIRTUAL_PORT"
       interval: 30s
       timeout: 1s
       retries: 1

   cron:
     build: ../Slave/cron
     container_name: slave-${ID}-cron
     tty: true
     stdin_open: true
     networks:
       - db-net
     volumes:
       - /var/run/docker.sock:/var/run/docker.sock:ro
       - ${DOCKER}:/usr/bin/docker
     environment:
       HEALTH: "*/1 * * * *"
       TEST: "*/1 * * * *"
     healthcheck:
       test: "if [ $$(cat /home/logs/*/*.err 2>/dev/null | wc -l) -ne 0 ]; then exit 1; fi"
       interval: 30s
       timeout: 3s
       retries: 2

   elasticsearch:
     image: docker.elastic.co/elasticsearch/elasticsearch:7.6.0
     container_name: slave-${ID}-elasticsearch
     environment:
       - cluster.name=docker-cluster
       - bootstrap.memory_lock=false
       - cluster.routing.allocation.disk.threshold_enabled=false
       - discovery.type=single-node
       - ES_JAVA_OPTS=-Xms512m -Xmx512m
     ulimits:
       memlock:
         soft: -1
         hard: -1
     volumes:
       - ../Slave/db/elastic/data:/usr/share/elasticsearch/data
     networks:
       - db-net
